spring.application.name=sprint4-task6
spring.profiles.active=json-logs
spring.output.ansi.enabled=ALWAYS

spring.datasource.url=jdbc:postgresql://postgresdb:5432/postgres
#spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver

# jpa не подключено
# spring.jpa.hibernate.ddl-auto=create-drop
# spring.jpa.show-sql=true
# spring.jpa.properties.hibernate.format_sql=true

# Отключаем автоматический запуск Job - batch
spring.batch.job.enabled=false
spring.batch.jdbc.initialize-schema=always
spring.batch.jdbc.table-prefix=BATCH_

spring.sql.init.mode=always

# !!! Тут есть ловушка. Чтобы работал actuator необходима зависимость
# implementation('org.springframework.boot:spring-boot-starter-web') - ее не было
# + Spring Batch запускается и отрабатывает быстро.
# Чтобы проще было отлаживаться надо добавить зависимость spring-boot-starter-web
management.endpoints.web.exposure.include=beans,env,health,info,metrics,mappings,prometheus
management.endpoint.env.show-values=ALWAYS
management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true

spring.kafka.bootstrap-servers=kafka:9092
spring.kafka.consumer.group-id=group-sprint4-task6
spring.kafka.topic.name=topic-sprint4-task6

# Включить автоконфигурацию OpenTelemetry и микрометрики Micrometer Tracing
management.metrics.export.otlpEnabled=true
management.tracing.enabled=true
# Конечная точка Jaeger OTLP Collector для сбора трассировок
otel.exporter.otlp.endpoint=http://jaeger:4317
# Формат указываем Jaeger (через OTLP)
otel.exporter.otlp.protocol=grpc
# Опционально имя сервиса (перезапишется в коде, если укажете)
#otel.resource.attributes=service.name=your-service-name